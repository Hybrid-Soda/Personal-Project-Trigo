plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.mono'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starter
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// dependency of database
	runtimeOnly 'com.mysql:mysql-connector-j'

	// lombok: Code Creator
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// dependency of JWT
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// dependency of Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// springdoc-openapi
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0'

	// dependency of test
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// dependency of monitoring
//	implementation 'io.micrometer:micrometer-registry-prometheus'
//	implementation 'com.github.loki4j:loki-logback-appender:1.6.0'
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.named('test') {
	useJUnitPlatform()
}

/** JaCoCo Start **/
jacoco {
	toolVersion = "0.8.12"
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	// 테스트 태스크가 실행된 후 jacocoTestReport 태스크 실행
	dependsOn test

	reports {
		// XML 및 HTML 형식의 커버리지 보고서를 생성하도록 설정
		xml.required = false
		csv.required = false

		// QueryDSL Q클래스 제외
		def QDomains = []
		for (qPattern in "**/QA".."**/QZ") {
			QDomains.add(qPattern + "*")
		}

		// 태스크 실행 후 평가 단계에서 제외 설정 적용
		afterEvaluate {
			classDirectories.setFrom(files(
					classDirectories.files.collect {
						fileTree(
								dir: layout.buildDirectory.dir("classes/java/main").get().asFile,
								exclude: ['**/Q*', '**/synthetic/**', '**/openApi*', '**/exception*',
										  '**/web/jwt*', '**/ReissueService*', '**/ContentRepositoryCustomImpl*']
						)
					}
			))
		}

		// HTML 커버리지 보고서의 저장 경로 지정
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}
/** JaCoCo End **/
